use `pf-mailler`;

CREATE TABLE PF_EMAIL  (
	EMAIL_ID BIGINT  NOT NULL PRIMARY KEY AUTO_INCREMENT,
	CREATED_AT DATETIME NOT NULL,
	TO_EMAIL VARCHAR(250) ,
	FROM_EMAIL VARCHAR(250) ,
	SUBJECT_EMAIL VARCHAR(250) ,
	BODY_EMAIL TEXT NULL ,
	SENT_TIME DATETIME NULL,
	IS_VALID BOOLEAN NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

select * from flyway_schema_history;


SELECT * FROM PF_EMAIL;




create database batch;

CREATE TABLE DEMO  (
	UUID varchar(256)  NOT NULL PRIMARY KEY,
	UPDATED_AT DATETIME NULL,
	PRICE DECIMAL(12,2) NULL,
	IS_VALID BOOLEAN NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

ALTER TABLE DEMO 
	ADD STOCK_UUID varchar(256) NOT NULL,
    ADD FOREIGN KEY (STOCK_UUID) REFERENCES STOCK(UUID);
    
    
CREATE TABLE PRICE  (
	UUID varchar(256)  NOT NULL PRIMARY KEY,
	UPDATED_AT DATETIME NULL,
	PRICE DECIMAL(12,2) NULL,
	IS_VALID BOOLEAN NULL,
    STOCK_UUID varchar(256) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

ALTER TABLE PRICE 
    ADD FOREIGN KEY (STOCK_UUID) REFERENCES STOCK(UUID);


CREATE TABLE STOCK  (
	UUID varchar(256)  NOT NULL PRIMARY KEY,
	NAME VARCHAR(256) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

insert into STOCK (UUID, NAME) values (uuid(), "VUZE");
insert into STOCK (UUID, NAME) values (uuid(), "VUKE");
insert into STOCK (UUID, NAME) values (uuid(), "SPY");
insert into STOCK (UUID, NAME) values (uuid(), "EFA");
insert into STOCK (UUID, NAME) values (uuid(), "VEA");
insert into STOCK (UUID, NAME) values (uuid(), "IEFA");
insert into STOCK (UUID, NAME) values (uuid(), "IWF");

insert into DEMO (UUID, UPDATED_AT, PRICE, IS_VALIDreader) values (uuid(), "2018-07-20 10:00:00", 98.00, true), (uuid(), "2018-07-20 10:00:00", 34.12, true);
insert into DEMO (UUID, UPDATED_AT, PRICE, IS_VALID) values (uuid(), "2018-07-22 10:00:00", 98.00, true), (uuid(), "2018-07-22 10:00:00", 65.20, true);
insert into DEMO (UUID, UPDATED_AT, PRICE, IS_VALID) values (uuid(), "2018-07-20 10:00:00", 98.00, true), (uuid(), "2018-07-20 10:00:00", 34.12, true);
insert into DEMO (UUID, UPDATED_AT, PRICE, IS_VALID) values (uuid(), "2018-07-22 10:00:00", 98.00, true), (uuid(), "2018-07-22 10:00:00", 65.20, true);
insert into DEMO (UUID, UPDATED_AT, PRICE, IS_VALID) values (uuid(), "2018-07-20 10:00:00", 98.00, true), (uuid(), "2018-07-20 10:00:00", 34.12, true);
insert into DEMO (UUID, UPDATED_AT, PRICE, IS_VALID) values (uuid(), "2018-07-22 10:00:00", 98.00, true), (uuid(), "2018-07-22 10:00:00", 65.20, true);

insert into DEMO (UUID, UPDATED_AT, PRICE, IS_VALID) values (uuid(), "2017-07-22 10:00:00", 98.00, true), (uuid(), "2017-07-22 10:00:00", 65.20, true);

truncate DEMO;

SELECT UUID, UPDATED_AT, PRICE, IS_VALID FROM DEMO WHERE IS_VALID = true;

SELECT * FROM DEMO WHERE UPDATED_AT < "2018-01-01";

select * from STOCK;

select * from PRICE;

UPDATE DEMO SET PRICE = 11.20, UPDATED_AT = now() WHERE UUID = 'bdf86b68-8d1f-11e8-be17-0242ac110002';


UPDATE 
	DEMO 
SET 
	UPDATED_AT = now() 
WHERE 
	UUID 
    IN  (
		'bdf86b68-8d1f-11e8-be17-0242ac110002', 
        '0054b5e8-8dd8-11e8-be17-0242ac110002',
        '0139c4d1-8dd8-11e8-be17-0242ac110002',
        '0054b81b-8dd8-11e8-be17-0242ac110002',
        '02205576-8dd8-11e8-be17-0242ac110002',
        '064c2110-8dd8-11e8-be17-0242ac110002',
        '064c2364-8dd8-11e8-be17-0242ac110002',
        '069876f3-8dd8-11e8-be17-0242ac110002',
        '06e4ce0b-8dd8-11e8-be17-0242ac110002',
        '07337ee4-8dd8-11e8-be17-0242ac110002',
        '08640499-8dd8-11e8-be17-0242ac110002',
        '08174a0a-8dd8-11e8-be17-0242ac110002'
        ); 
UPDATE DEMO SET PRICE = 1000.20 WHERE UUID = '02205576-8dd8-11e8-be17-0242ac110002';

SELECT UUID, UPDATED_AT, PRICE, IS_VALID FROM DEMO WHERE UPDATED_AT BETWEEN '2017-01-01 00:00:00' AND '2017-12-31 23:59:59';

UPDATE DEMO SET IS_VALID = true WHERE UPDATED_AT BETWEEN '2017-01-01 00:00:00' AND '2017-12-31 23:59:59';

select * from DEMO;

select count(uuid) from DEMO;

select * from BATCH_STEP_EXECUTION;

select * from BATCH_STEP_EXECUTION_CONTEXT;

select * from BATCH_JOB_EXECUTION;

select * from BATCH_JOB_INSTANCE;


CREATE TABLE BATCH_JOB_INSTANCE  (
	JOB_INSTANCE_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT ,
	JOB_NAME VARCHAR(100) NOT NULL,
	JOB_KEY VARCHAR(32) NOT NULL,
	constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION  (
	JOB_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT  ,
	JOB_INSTANCE_ID BIGINT NOT NULL,
	CREATE_TIME DATETIME NOT NULL,
	START_TIME DATETIME DEFAULT NULL ,
	END_TIME DATETIME DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED DATETIME,
	JOB_CONFIGURATION_LOCATION VARCHAR(2500) NULL,
	constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
	references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
	JOB_EXECUTION_ID BIGINT NOT NULL ,
	TYPE_CD VARCHAR(6) NOT NULL ,
	KEY_NAME VARCHAR(100) NOT NULL ,
	STRING_VAL VARCHAR(250) ,
	DATE_VAL DATETIME DEFAULT NULL ,
	LONG_VAL BIGINT ,
	DOUBLE_VAL DOUBLE PRECISION ,
	IDENTIFYING CHAR(1) NOT NULL ,
	constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION  (
	STEP_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT NOT NULL,
	STEP_NAME VARCHAR(100) NOT NULL,
	JOB_EXECUTION_ID BIGINT NOT NULL,
	START_TIME DATETIME NOT NULL ,
	END_TIME DATETIME DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	COMMIT_COUNT BIGINT ,
	READ_COUNT BIGINT ,
	FILTER_COUNT BIGINT ,
	WRITE_COUNT BIGINT ,
	READ_SKIP_COUNT BIGINT ,
	WRITE_SKIP_COUNT BIGINT ,
	PROCESS_SKIP_COUNT BIGINT ,
	ROLLBACK_COUNT BIGINT ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED DATETIME,
	constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
	STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT TEXT ,
	constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
	references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
	JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT TEXT ,
	constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_STEP_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_STEP_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_EXECUTION_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_JOB_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_JOB_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_SEQ);